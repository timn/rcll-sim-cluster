#!/usr/bin/env python3


import os

from work_queue import WorkQueue
from pod_controller import PodController

class Configuration(object):
	def __init__(self):
		self.mongodb_uri = self.value("MONGODB_URI", "mongodb://localhost:27017/")
		self.mongodb_rs = self.value("MONGODB_RS")
		self.mongodb_host = self.value("MONGODB_HOST")
		self.mongodb_port = self.value("MONGODB_PORT")
		self.mongodb_queue_db = self.value("MONGODB_QUEUE_DB", "workqueue")
		self.mongodb_queue_col = self.value("MONGODB_QUEUE_COLLECTION", "q")
		self.mongodb_rs_srv = self.value("MONGODB_RS_SRV")
		self.template_path = self.value("TEMPLATE_PATH", "/opt/rcll-sim/templates")

	def value(self, key, default=None):
		if key in os.environ:
			return os.environ[key]
		else:
			return default

        
class SimController(object):
	def __init__(self, config):
		self.config	 = config

		# The work queue will figure out a valid combination of MongoDB access
		# parameters, e.g., host/port, URI, or replica set discovery via DNS
		self.queue = WorkQueue(host=self.config.mongodb_host,
							   port=self.config.mongodb_port,
							   uri=self.config.mongodb_uri,
							   srv_name=self.config.mongodb_rs_srv,
							   database=self.config.mongodb_queue_db,
							   replicaset=self.config.mongodb_rs,
							   collection=self.config.mongodb_queue_col)

		self.podctrl = PodController(self.config, self.queue)

if __name__ == '__main__':
	config = Configuration()
	sim_ctrl = SimController(config)

	#sim_ctrl.create_pod(pod1)
	#sim_ctrl.monitor_pods()
