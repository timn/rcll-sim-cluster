#!/usr/bin/env python3

from work_queue import WorkQueue
from pod_controller import PodController
from config import Configuration

import os
import argparse
from datetime import datetime, timedelta
from traceback import print_exc

class SimController(object):
	def __init__(self, include_recently_failed=False):
		self.config	= Configuration()
		self.include_recently_failed = include_recently_failed

		# The work queue will figure out a valid combination of MongoDB access
		# parameters, e.g., host/port, URI, or replica set discovery via DNS
		self.wq = WorkQueue(host=self.config.mongodb_host,
		                    port=self.config.mongodb_port,
		                    uri=self.config.mongodb_uri,
		                    srv_name=self.config.mongodb_rs_srv,
		                    database=self.config.mongodb_queue_db,
		                    replicaset=self.config.mongodb_rs,
		                    collection=self.config.mongodb_queue_col)

		self.podctrl = PodController(self.config)

		# Create this controllers namespace
		# Assume namespace has been created as part of the invoking pod
		# self.podctrl.create_namespace(config.kube_namespace)

	def run(self):
		recently_failed_deadline=None
		if not self.include_recently_failed:
			recently_failed_deadline = datetime.utcnow() - timedelta(minutes=15)
		job = self.wq.get_next_item(recently_failed_deadline)
		while job is not None:
			# We do +1 here to include the one we are currently handling
			(all_pending, without_recently_failed) = self.wq.num_pending_jobs(recently_failed_deadline)
			print("Open jobs: %d (with recently failed: %d)" % (without_recently_failed+1, all_pending+1))

			try:
				print("Running job %s" % job["name"])
				start_time = datetime.now()
				manifests=[]
				num_items = { "YAML": 0, "Pod": 0, "Container": 0, "Service": 0, "Ingress": 0, "ConfigMap": 0 }
				for i in job["params"]["template_parameters"]:
					i["vars"]["namespace"] = self.config.kube_namespace
					print("  - template: %s" % i["template"])
					sufficient_containers = i["sufficient_containers"] if "sufficient_containers" in i else []
					items = self.podctrl.create_from_template(i["template"], i["vars"],
					                                          sufficient_containers=sufficient_containers)
					for i in items:
						#print("    - %s: %s" % (i[0], i[1]))
						num_items[i[0]] += 1
						if i[0] == "Pod":
							num_items["Container"] += len(i[2]["spec"]["containers"])
						manifests.append(str(i[2]))

				update = { "$set": { "manifests": manifests } }
				self.wq.update_item(job["name"], update)

				format_string="Running {Pod} pods, {Container} cont, {Service} svc, " \
				               + "{Ingress} ing, {ConfigMap} cm"
				print(format_string.format(**num_items))

				print("Monitoring pods")
				if self.podctrl.monitor_pods():
					print("Job %s completed successfully" % job["name"])
					self.wq.mark_item_done(job["name"])
				else:
					print("Job %s failed, reqeueing" % job["name"])
					self.wq.requeue_item(job["name"])
			except:
				print("*** EXCEPTION ***")
				print_exc()
				print("Job %s failed, reqeueing" % job["name"])
				self.wq.requeue_item(job["name"])

			# Cleanup removing pods, services
			self.podctrl.delete_all()
			end_time = datetime.now()
			print("Job %s finished (took %s)\n" % (job["name"], str(end_time-start_time)))

			if not self.include_recently_failed:
				recently_failed_deadline = datetime.utcnow() - timedelta(minutes=15)
			job = self.wq.get_next_item(recently_failed_deadline)
		print("No more open jobs")

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='Run RCLL Cluster Sim Jobs')
	parser.add_argument('--include-recently-failed', action='store_true',
	                    help='Allow execution of recently failed jobs.')
	args = parser.parse_args()

	sim_ctrl = SimController(args.include_recently_failed)
	sim_ctrl.run()
