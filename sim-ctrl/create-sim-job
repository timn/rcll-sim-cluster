#!/usr/bin/env python3


from work_queue import WorkQueue
from config import Configuration
from pprint import pprint

import string
import random

def generate_random_id(team_cyan, team_magenta, suffix_length=8):
	return team_cyan + "-vs-" + team_magenta + ":" + \
		''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(suffix_length))
	#''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

def generate_id(team_cyan, team_magenta, index, suffix_length=6):
	return team_cyan + "-vs-" + team_magenta + ":" + "{:0{width}}".format(index, width=suffix_length)

if __name__ == '__main__':
	config = Configuration()

	# The work queue will figure out a valid combination of MongoDB access
	# parameters, e.g., host/port, URI, or replica set discovery via DNS
	wq = WorkQueue(host=config.mongodb_host,
	               port=config.mongodb_port,
	               uri=config.mongodb_uri,
	               srv_name=config.mongodb_rs_srv,
	               database=config.mongodb_queue_db,
	               replicaset=config.mongodb_rs,
	               collection=config.mongodb_queue_col)

	num_robots  = 1
	team_prefix="c"
	team_cyan="Carologistics"
	team_magenta="A-Team"
	team_color="CYAN"
	robots = ["C-R%d" % i for i in range(1,num_robots+1)]

	jobname = generate_id(team_cyan, team_magenta, wq.total_num_jobs()+1)

	params = \
	{
		"elements": [
			{
			    "template": "sim-refbox",
			    "vars":	{
				    "rcll_sim_image": "defiant.kbsg.rwth-aachen.de:5000/timn/rcll-sim:2016-f25-kinetic",
				    "team_cyan": team_cyan,
				    "team_magenta": team_magenta,
				    "robots": robots
			    },
				"sufficient_containers": ["run-game"]
		    },
		    {
			    "template": "gzweb",
			    "vars":	{
				    "gzweb_image": "defiant.kbsg.rwth-aachen.de:5000/timn/gzweb:7"
			    }
		    }
		]
	}
	for i in range (1, num_robots+1):
		robot_suffix="%s%d" % (team_prefix, i)
		robot_pod = {
			"template": "robot-pod",
			"vars":	{
				"rcll_sim_image": "defiant.kbsg.rwth-aachen.de:5000/timn/rcll-sim:2016-f25-kinetic",
				"robot": {
					"pod_name": "robot-%s" % robot_suffix,
					"service_name": "robot-%s" % robot_suffix,
					"plugins": "gazsim-meta-robotino-ros,gazsim-meta-robotino-vision-high-level,gazsim-navgraph-generator",
					"name": "%s-R%s" % (team_prefix.upper(), i),
					"num": i,
					"config_num": i
				},
				"fawkes": {
					"service_name": "fawkes-%s" % robot_suffix,
					"port": 1920 + i
				},
				"ros": {
					"service_name": "rosmaster-%s" % robot_suffix,
					"port": 11311
				}
			}
		}
		params["elements"].append(robot_pod)

	agent_port_offset = {
		"CYAN": 6,
		"MAGENTA": 9
	}
	ros_pod = {
		"template": "rcll-sim-ros",
		"vars":	{
			"rcll_sim_ros_image": "defiant.kbsg.rwth-aachen.de:5000/timn/rcll-sim-ros:2016-f25-kinetic",
			"robots": robots,
			"ros": {
				"port": 11311
			},
			"fawkes": [
				{
					"host": "fawkes-%s%d" % (team_prefix, i),
					"port": 1920 + i
				}
				for i in range(1, num_robots+1)
			],
			"navgraph_rosmaster": "http://rosmaster-%s1:11311" % team_prefix,
			"team": {
				"name": team_cyan,
				"color": team_color,
				"crypto_key": "randomkey"
			},
			"refbox": {
				"peer_address": "refbox",
				"peers": [
					{
						"public_recv_port":  4410 + agent_port_offset[team_color] + i,
						"public_send_port":  4450 + agent_port_offset[team_color] + i,
						"cyan_recv_port":    4470 + agent_port_offset[team_color] + i,
						"cyan_send_port":    4490 + agent_port_offset[team_color] + i,
						"magenta_recv_port": 4510 + agent_port_offset[team_color] + i,
						"magenta_send_port": 4530 + agent_port_offset[team_color] + i
					}
					for i in range(1, num_robots+1)
				]
			},
		}
	}
	params["elements"].append(ros_pod)

	rosplan_pod = {
		"template": "rcll-sim-rosplan",
		"vars":	{
			"rcll_sim_rosplan_image": "defiant.kbsg.rwth-aachen.de:5000/timn/rcll-sim-rosplan:2016-f25-kinetic",
			"robots": robots,
			"ros_master_uri": "http://rosmaster:11311",
			"team": {
				"name": team_cyan,
				"color": team_color
			},
			"autostart_planning": "true"
		}
	}
	params["elements"].append(rosplan_pod)

	print("Creating %s\n" % jobname)
	pprint(params)
	wq.add_item(jobname, params)
