#!/usr/bin/env python3

from work_queue import WorkQueue
from config import Configuration

import argparse
from datetime import datetime, timedelta
from pprint import pprint
import matplotlib
import statistics
import numpy as np
import random

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='Print job info')
	parser.add_argument('--tournament', metavar='T-NAME', required=True,
	                    help='Name of simulation tournament')
	args = parser.parse_args()

	config = Configuration()
	wq = WorkQueue(host=config.mongodb_host,
	               port=config.mongodb_port,
	               uri=config.mongodb_uri,
	               srv_name=config.mongodb_rs_srv,
	               database=config.mongodb_queue_db,
	               replicaset=config.mongodb_rs,
	               collection=config.mongodb_queue_col)

	refbox_db = wq.client["refbox"]
	game_report_collection = refbox_db["game_report"]

	tournament_regex = { "$regex": "^%s:\d+:.*" % args.tournament}
	tournament_filter = {"name": tournament_regex}

	# Aggregation pipeline version
	cursor = game_report_collection.aggregate(\
	     # Extract reports concerning the given tournament
		[{"$match":
		  {"job_name": tournament_regex,
		   "teams.0": { "$ne": "" },
		   "teams.1": { "$ne": "" }}},
		 # Get only delivery times
		 {"$match":
		  {"points.reason": "Delivered item for order 1"}
		 },
		 # Project document to contain only relevant information
		 {"$project":
		  { "job_name": "$job_name",
		    "team_cyan": { "$arrayElemAt": ["$teams", 0]},
		    "team_magenta": { "$arrayElemAt": ["$teams", 1]},
		    "points_cyan": { "$arrayElemAt": ["$total-points", 0]},
		    "points_magenta": { "$arrayElemAt": ["$total-points", 1]},
		    "delivery_cyan": {
			"$filter" : {
			    "input": "$points", "as": "p",
			    "cond": { "$and": [ {"$eq": ["$$p.team", "CYAN"] },
			                        {"$eq": ["$$p.reason", "Delivered item for order 1"]}]}}},
		    "delivery_magenta": {
			"$filter" : {
			    "input": "$points", "as": "p",
			    "cond": { "$and": [ {"$eq": ["$$p.team", "MAGENTA"] },
			                        {"$eq": ["$$p.reason", "Delivered item for order 1"]}]}}}
		  }
		 },
		 {"$project":
		  {
		    "job_name": 1, "team_cyan": 1, "team_magenta": 1,
		    "points_cyan": 1, "points_magenta": 1,
		    "delivery_cyan": 1, "delivery_magenta": 1, 
		          "delivery_time_cyan": { "$ifNull": [{ "$arrayElemAt": ["$delivery_cyan.game-time", 0]}, -1.0]},
		    "delivery_time_magenta": { "$ifNull": [{"$arrayElemAt": ["$delivery_magenta.game-time", 0]}, -1.0]}}},
		 # # Emit list of one document per team
		 # {"$project":
		 #  {"job_name": "$job_name",
		 #   "doc": [{"job_name": "$job_name", "team": "$team_cyan",
		 #              "points": "$points_cyan"},
		 #             {"job_name": "$job_name", "team": "$team_magenta",
		 #              "points": "$points_magenta"}]}},
		 # # Unwind created array again into multiple documents
		 # {"$unwind": "$doc"},

		 # # Group by team summing wins, defeats, draws, points
		 # {"$group":
		 #  {"_id": "$doc.team",
		 #   "scores": { "$push": "$doc.points" }}},

		 # {"$sort": { "_id": 1 }},
		 ])

	for d in cursor:
		#print("Doc: %s" % str(d))
		print("%s %s %s %d %d %f %f" %
		      (d["job_name"], d["team_cyan"], d["team_magenta"],
		       d["points_cyan"], d["points_magenta"],
		       d["delivery_time_cyan"],
		       d["delivery_time_magenta"]))
