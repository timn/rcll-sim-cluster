#!/usr/bin/env python3

from job_generator import JobGenerator

import argparse
import itertools
import datetime
import random
from traceback import print_exc

class TournamentGenerator(object):
	def __init__(self, template, debug=False, dry_run=False):
		self.dry_run = dry_run
		self.jobgen = JobGenerator(template, debug=debug, dry_run=self.dry_run)

	def pairings(self, teams):
		return [p for p in itertools.permutations(teams, r=2)]

	def pairings_iterator(self, pairings, n=1, shuffle=False):
		if shuffle:
			for i in range(0, n):
				shuffled_pairings = list(pairings)
				random.shuffle(shuffled_pairings)
				for p in shuffled_pairings:
					yield p
		else:
			return itertools.chain.from_iterable(itertools.repeat(pairings, n))

	def generate(self, tournament_name, teams, n=1, time_per_game=0, num_concurrent_games=1, shuffle=False):
		pairings = self.pairings(teams)
		num_games = 0
		print("Number of pairings: %d" % len(pairings))
		for p in self.pairings_iterator(pairings, n, shuffle=shuffle):
			try:
				(jobname, idnum, params) = self.jobgen.generate_and_store(tournament_name,
				                                                          team_cyan=p[0], team_magenta=p[1])
				num_games += 1
				print("- %s" % jobname)
			except:
				print("\nFailed to generate job %d: %s vs %s" % (p[0], p[1], num_games+1))
				print_exc()

		print("Total number of games: %d" % num_games)

		if time_per_game > 0:
			num_rounds = num_games // num_concurrent_games
			if num_games % num_concurrent_games > 0:
				num_rounds += 1
			total_estimate = datetime.timedelta(minutes=(num_rounds * time_per_game))
			print("Total estimated time: %s (%d minutes per game, %d concurrent games, therefore %d rounds)" \
			      % (total_estimate, time_per_game, num_concurrent_games, num_rounds))

		#jobgen.generate_and_store(args.tournament_name, args.team_cyan, args.team_magenta)

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='Create RCLL Cluster Sim Tournament')
	parser.add_argument('--name', metavar='T-NAME', required=True,
	                    help='Name of simulation tournament')
	parser.add_argument('--template', metavar='FILENAME', required=True,
	                    help='Template file for job parameters.')
	parser.add_argument('--iterations', metavar='N', type=int, default=1,
	                    help='Number of iterations to play (default 1)')
	parser.add_argument('--shuffle', dest='shuffle', action='store_true',
	                    help='Shuffle pairings in each iteration.')
	parser.add_argument('--dry-run', dest='dry_run', action='store_true',
	                    help='Only run generation, but do not store in work queue.')
	parser.add_argument('--time-per-game', metavar="T", type=int, default=0,
	                    help='Estimated time for a single game in minutes (default 0, no estimate).')
	parser.add_argument('--num-concurrent-games', metavar="N", type=int, default=1,
	                    help='Number of games that can be played concurrently (default 1).')
	parser.add_argument('--debug', dest='debug', action='store_true',
	                    help='Template file for job parameters.')
	parser.add_argument('teams', metavar="TEAM", nargs="+",
	                    help='Names of teams that play')
	args = parser.parse_args()

	print("Generating tournament '%s'" % args.name)
	if args.dry_run:
		print("\n*** ATTENTION: This is a dry run, no jobs actually stored ***\n")
	tg = TournamentGenerator(args.template, debug=args.debug, dry_run=args.dry_run)
	tg.generate(args.name, args.teams, args.iterations,
	            time_per_game=args.time_per_game,
	            num_concurrent_games=args.num_concurrent_games,
				shuffle=args.shuffle)
