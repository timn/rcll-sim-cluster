#!/usr/bin/env python3

from job_generator import JobGenerator
from config import Configuration

import argparse
from traceback import print_exc
import copy
import jinja2

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='Create RCLL Cluster Sim Job')
	parser.add_argument('--tournament', metavar='TOURNAMENT', required=True,
	                    help='Tournament to cancel jobs of.')
	parser.add_argument('--not-only-pending', dest='only_pending',
	                    action='store_false', default = True,
	                    help='Cancel all jobs, not only pending ones.')
	parser.add_argument('--dry-run', action='store_true',
	                    help='Only run generation, but do not store in work queue.')
	parser.add_argument('--template', metavar='FILENAME',
	                    default='/opt/rcll-sim-ctrl/templates/game.yaml.j2',
	                    help='Template file for job parameters.')
	parser.add_argument('--debug', dest='debug', action='store_true',
	                    help='Template file for job parameters.')
	args = parser.parse_args()

	if args.dry_run:
		print("\n*** ATTENTION: This is a dry run, no jobs actually cancelled ***\n")

	try:
		jobgen = JobGenerator(args.template, args.debug, dry_run=args.dry_run)
		jobgen.cancel_jobs(args.tournament, only_pending = args.only_pending)

	except:
		print("\nFailed to generate job")
		print_exc()
