#!/usr/bin/env python3

from kubernetes import client, config
from kubernetes.client import V1Container, V1DeleteOptions, V1ObjectMeta, V1Pod, V1PodSpec
from kubernetes.watch import Watch
from kubernetes.client.rest import ApiException

import yaml
import types
import textwrap

import pymongo

class SimController(object):
	def __init__(self):
		self.core_api = client.CoreV1Api()
		self.pods = {}

	def wait_pod_event(self, namespace, name, cond):
		w = Watch()
		for event in w.stream(self.core_api.list_pod_for_all_namespaces, timeout_seconds=120):
			object = event['object']
			etype = event['type']
			if object.metadata.namespace != namespace or object.metadata.name != name: continue
			if cond(etype, object):
				w.stop()

	def _pod_completed_cond(etype, object):
		return (etype == "MODIFIED" and
		        (object.status.phase == "Succeeded" or object.status.phase == "Failed"))

	
	def create_pod(self, manifest):
		# pod_meta = V1ObjectMeta(namespace=manifest["metadata"]["namespace"],
		#                         name=manifest["metadata"]["name"],
		#                         labels=manifest["metadata"]["labels"])
		# pod_spec = V1PodSpec(
		# 	containers=[
		# 		V1Container(
		# 			name=c["name"],
		# 			command=c.get("command", None),
		# 			args=c.get("args", None),
		# 			image_pull_policy=c.get("imagePullPolicy", None),
		# 			image=c["image"]
		# 		)
		# 		# Note that this is a list comprehension
		# 			for c in manifest["spec"]["containers"]
		# 	],
		# 	restart_policy=manifest["spec"].get("restartPolicy", None)
		# )
		# body = V1Pod(spec=pod_spec, metadata=pod_meta)
		try:
			res = self.core_api.create_namespaced_pod(namespace=manifest["metadata"]["namespace"],
			                                          body=manifest)
			self.pods[(manifest["metadata"]["namespace"], manifest["metadata"]["name"])] = \
				{ "phase": "Requested", "manifest": manifest }
		except ApiException as e:
			print("Failed to create pod %s/%s: '%s'" % (manifest["metadata"]["namespace"],
			                                            manifest["metadata"]["name"], e))

	def monitor_pods(self):
		w = Watch()
		for event in w.stream(self.core_api.list_pod_for_all_namespaces, timeout_seconds=120):
			object = event['object']
			etype = event['type']
			uid = (object.metadata.namespace, object.metadata.name)
			if uid in self.pods:
				print("Event: %s %s %s" % (etype, object.metadata.name, object.status.phase))
			
				if etype == "MODIFIED":
					#print("  %s" % event)
					self.pods[uid]["phase"] = object.status.phase
					if ((object.status.phase == "Succeeded" or object.status.phase == "Failed")
					    and object.metadata.deletion_timestamp == None):

						# it's done, cleanup pod
						print("Pod %s/%s is finished" % (object.metadata.namespace, object.metadata.name))
						# We must pass a new default API client to avoid urllib conn pool warnings
						core_api_del = client.CoreV1Api(client.ApiClient())
						res = core_api_del.delete_namespaced_pod(namespace = object.metadata.namespace,
						                                         name = object.metadata.name,
						                                         body = V1DeleteOptions())

				if etype == "DELETED":
					print("Pod %s/%s has been deleted" % (object.metadata.namespace, object.metadata.name))
					del self.pods[uid]
					if not self.pods:
						w.stop()
		print("Done watching events")

if __name__ == '__main__':
	config.load_incluster_config()
	sim_ctrl = SimController()

	pod1yaml = textwrap.dedent(\
	"""
    apiVersion: v1
    kind: Pod
    metadata:
      namespace: default
      name: test
      labels:
        task: foo
    spec:
      containers:
      - name: rcll-sim-ctrl-tes
        image: defiant.kbsg.rwth-aachen.de:5000/timn/rcll-sim-ctrl:latest
        command: ["/print_pods"]
        imagePullPolicy: IfNotPresent
      restartPolicy: Never
	""")

	pod1 = yaml.load(textwrap.dedent(pod1yaml))

	sim_ctrl.create_pod(pod1)
	sim_ctrl.monitor_pods()
