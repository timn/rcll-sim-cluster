#!/usr/bin/env python3

from work_queue import WorkQueue
from config import Configuration
from job_generator import JobGenerator

import argparse
from datetime import datetime, timedelta
from pprint import pprint

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='Print job info')
	parser.add_argument('--tournament',
	                    help='Consider only jobs for given tournament.')
	parser.add_argument('job_names', metavar="JOB-NAME", nargs='*',
	                    help='Name of job to retrieve info for.')
	args = parser.parse_args()

	config = Configuration()
	wq = WorkQueue(host=config.mongodb_host,
	               port=config.mongodb_port,
	               uri=config.mongodb_uri,
	               srv_name=config.mongodb_rs_srv,
	               database=config.mongodb_queue_db,
	               replicaset=config.mongodb_rs,
	               collection=config.mongodb_queue_col)

	if args.job_names:
		for job_name in args.job_names:
			item =  wq.get_specific_item(job_name)
			if item is None:
				print("Failed to retrieve item with name '%s'" % args.job_name)
			else:
				print("*** Job %s ***" % job_name)
				pprint(item)

	tournament_regex = None
	if args.tournament:
		tournament_regex = JobGenerator.id_regex(args.tournament)

	recently_failed_deadline = datetime.utcnow() - timedelta(minutes=15)

	other = wq.num_pending_jobs(recently_failed_deadline, name_regex=tournament_regex)
	print("Other: %s" % str(other))

	jobstat = wq.job_stats(recently_failed_deadline, name_regex=tournament_regex)

	if args.tournament:
		print("Job Stats for '%s'" % args.tournament)
	else:
		print("Job Stats for all tournaments")
	for key, value in jobstat.items():
		print("  - %-16s: %2d" % (key, value))

